parameters:
#Android app
- name: 'NodeVersion'
  type: string
  default: '12.19.0'
- name: 'ProjectCodeDirectory'
  type: string
  default: './MobildAppFramework'
- name: 'ProjectName'
  type: string
  default: 'MobildAppFramework'
- name: 'ApksignerKeystoreFile'
  type: string
  default: 'default-value'
- name: 'AndroidKeyStorePassword'
  type: string
  default: 'default-value'
- name: 'AndroidKeyAlias'
  type: string
  default: 'default-value'
- name: 'AndroidKeyAliasPassword'
  type: string
  default: 'default-value'
- name: 'AppSlugAndroid'
  type: string
  default: 'gayanishakaraw/test-app-android'
- name: 'UploadAPKToAppCenter'
  type: boolean
  default: false
- name: 'AppCenterServiceEndpoint'
  type: string
  default: 'App Center'

#Apple iOS app
- name: 'BuildiOS'
  type: boolean
  default: false
- name: 'AppSlugiOS'
  type: string
  default: 'gayanishakaraw/test-app-ios'
- name: 'AppleCertificateFileName'
  type: string
  default: 'MobileProd.p12'
- name: 'AppleCertificatePassword'
  type: string
  default: 'default-value'
- name: 'ProfileSecureFile'
  type: string
  default: 'MyProject.mobileprovision'
- name: 'WorkspacePath'
  type: string
  default: 'ios/TestProject.xcworkspace'
- name: 'SigningIdentity'
  type: string
  default: 'defaultIdentity'
- name: 'ProvisioningProfileUuid'
  type: string
  default: 'f940ccde-a812-4ade-98d8-76c3ab1d0c2e'
- name: 'DistributionGroupId'
  type: string
  default: 'f940ccde-a812-4ade-98d8-76c3ab1d0c2e'

steps:
  - checkout: self
    persistCredentials: true
    clean: true

  - task: NodeTool@0
    displayName: 'Install Node ${{ parameters.NodeVersion }}'
    inputs:
      versionSpec: '${{ parameters.NodeVersion }}'
 
  - script: |
      yarn install
    displayName: 'Install Dependencies'
    workingDirectory: '${{ parameters.ProjectCodeDirectory }}'

  - script: |
      # Disable autocommit on version bump 
      yarn config set version-sign-git-tag false
      yarn config set version-git-tag false
      yarn config set version-commit-hooks false
      # Checkout branch where the build is triggered
      git checkout $(Build.SourceBranchName)
      # Extract existing version of package.json
      oldVer=$(jq -r ".version" package.json)
      # Bump version
      yarn version --patch
      # Add bumped version to staging
      git add *
      # Extract new version of package.json
      newVer=$(jq -r ".version" package.json)
      # Set environment variables
      echo "##vso[task.setvariable variable=OLD_VERSION]$oldVer"
      echo "##vso[task.setvariable variable=NEW_VERSION]$newVer"
    displayName: 'Bump app version and set variables'
    workingDirectory: '${{ parameters.ProjectCodeDirectory }}'

  - task: ios-bundle-version@1
    displayName: 'Bump iOS version'
    condition: eq('${{ parameters.BuildiOS }}', 'true')
    inputs:
      sourcePath: '${{ parameters.ProjectName }}/ios/${{ parameters.ProjectName }}/Info.plist'
      versionCodeOption: 'buildid'
      versionCode: '$(Build.BuildId)'
      versionName: '$(NEW_VERSION)'
      printFile: false

  - task: Gradle@2
    displayName: 'Build APK'
    inputs:
      gradleWrapperFile: '${{ parameters.ProjectName }}/android/gradlew'
      workingDirectory: '${{ parameters.ProjectName }}/android/'
      options: '-PversionName=$(NEW_VERSION) -PversionCode=$(Build.BuildId)'
      tasks: 'assembleRelease'
      publishJUnitResults: false
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.8'
      gradleOptions: '-Xmx3072m'
      sonarQubeRunAnalysis: false

  - task: AndroidSigning@3
    displayName: 'Sign APK'
    inputs:
      apkFiles: '${{ parameters.ProjectName }}/android/app/build/outputs/apk/release/*.apk'
      apksignerKeystoreFile: '${{ parameters.ApksignerKeystoreFile }}'
      apksignerKeystorePassword: '${{ parameters.AndroidKeyStorePassword }}'
      apksignerKeystoreAlias: '${{ parameters.AndroidKeyAlias }}'
      apksignerKeyPassword: '${{ parameters.AndroidKeyAliasPassword }}'
      zipalign: true

  - task: PublishBuildArtifacts@1
    displayName: 'Publish APK to artifacts'
    inputs:
      PathtoPublish: '${{ parameters.ProjectName }}/android/app/build/outputs/apk/release'
      ArtifactName: 'android'
      publishLocation: 'Container'

  - task: AppCenterDistribute@3
    displayName: 'Upload APK to AppCenter'
    condition: eq(${{ parameters.UploadAPKToAppCenter }}, 'true')
    inputs:
      serverEndpoint: '${{ parameters.AppCenterServiceEndpoint }}'
      appSlug: '${{ parameters.AppSlugAndroid }}'
      appFile: '${{ parameters.ProjectCodeDirectory }}/android/app/build/outputs/apk/release/app-release-unsigned.apk'
      releaseNotesOption: 'file'
      isMandatory: true
      destinationType: 'groups'
      distributionGroupId: '${{ parameters.DistributionGroupId }}'
      isSilent: true

#Apple iOS app section

#   - script: |
#       tag="mobile_$(NEW_VERSION)"
#       echo "New tag $tag"
#       git add *
#       git commit -m "Update version from $(OLD_VERSION) to $(NEW_VERSION)"
#       git tag $tag
#       git pull --rebase origin $(Build.SourceBranchName)
#       git push origin $(Build.SourceBranchName)
#       git push --tags
#     displayName: Bump commit
#     workingDirectory: '${{ parameters.ProjectCodeDirectory }}''

#   - task: InstallAppleCertificate@2
#     condition: eq('${{ parameters.BuildiOS }}', 'true')
#     displayName: Install Apple Certificate
#     inputs:
#       certSecureFile: '${{ parameters.AppleCertificateFileName }}'
#       certPwd: '${{ parameters.AppleCertificatePassword }}'
#       keychain: 'temp'
#       deleteCert: true

#   - task: InstallAppleProvisioningProfile@1
#     condition: eq('${{ parameters.BuildiOS }}', 'true')
#     displayName: 'Install Apple Provisioning Profile'
#     inputs:
#       provisioningProfileLocation: 'secureFiles'
#       provProfileSecureFile: '${{ parameters.ProfileSecureFile }}'
#       removeProfile: true

#   - task: CocoaPods@0
#     condition: eq('${{ parameters.BuildiOS }}', 'true')
#     displayName: 'Install CocoaPods'
#     inputs:
#       workingDirectory: '${{ parameters.ProjectName }}/ios'

#   - task: Xcode@5
#     condition: eq('${{ parameters.BuildiOS }}', 'true')
#     displayName: 'Build IPA'
#     inputs:
#       actions: 'build'
#       configuration: 'Release'
#       sdk: 'iphoneos'
#       xcWorkspacePath: '${{ parameters.WorkspacePath }}'
#       scheme: '${{ parameters.ProjectName }}'
#       packageApp: true
#       exportPath: 'output'
#       signingOption: 'manual'
#       #signingIdentity: '${{ parameters.SigningIdentity }}'
#       #provisioningProfileUuid: '${{ parameters.ProvisioningProfileUuid }}'
#       signingIdentity: '$(APPLE_CERTIFICATE_SIGNING_IDENTITY)'
#       provisioningProfileUuid: '$(APPLE_PROV_PROFILE_UUID)'

#   - task: CopyFiles@2
#     displayName: 'Copy IPA'
#     condition: eq('${{ parameters.BuildiOS }}', 'true')
#     inputs:
#       contents: '**/*.ipa'
#       targetFolder: '$(build.artifactStagingDirectory)'
#       overWrite: true
#       flattenFolders: true

#   - task: PublishBuildArtifacts@1
#     condition: eq('${{ parameters.BuildiOS }}', 'true')
#     displayName: 'Publish IPA to artifacts'
#     inputs:
#       PathtoPublish: '$(build.artifactStagingDirectory)'
#       ArtifactName: 'ios'
#       publishLocation: 'Container'

#   - task: AppCenterDistribute@3
#     condition: eq('${{ parameters.BuildiOS }}', 'true')
#     displayName: 'Upload IPA to AppCenter'
#     inputs:
#       serverEndpoint: '${{ parameters.AppCenterServiceEndpoint }}'
#       appSlug: '${{ parameters.AppSlugiOS }}'
#       appFile: '${{ parameters.ProjectName }}/output/${{ parameters.ProjectName }}.ipa'
#       releaseNotesOption: 'file'
#       isMandatory: true
#       # destinationType: 'groups'
#       # distributionGroupId: '058a4704-ea24-4877-a2f0-bdfaff9335dc'
#       isSilent: true
